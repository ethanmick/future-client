// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  var NetSocket, Q, Socket, jsonstream, uuid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Q = require('q');

  jsonstream = require('json-stream');

  uuid = require('uuid').v4;

  NetSocket = require('net').Socket;

  Socket = (function(superClass) {
    extend(Socket, superClass);

    function Socket() {
      var stream;
      Socket.__super__.constructor.call(this);
      this.actions = {};
      this.setEncoding('utf8');
      stream = jsonstream();
      stream.on('data', this.response.bind(this));
      this.pipe(stream);
    }

    Socket.prototype.response = function(json) {
      var deferred, id;
      id = json.id;
      deferred = this.actions[id];
      delete json.id;
      if (deferred) {
        return deferred.resolve(json);
      }
      return this.emit('task', json);
    };

    Socket.prototype.send = function(name, opts) {
      var deferred, pkt;
      pkt = this.packet(name, opts);
      deferred = Q.defer();
      this.actions[pkt.id] = deferred;
      this.write(this.compress(pkt));
      return deferred.promise;
    };

    Socket.prototype.compress = function(obj) {
      return JSON.stringify(obj);
    };

    Socket.prototype.packet = function(name, obj) {
      var id, pkt;
      id = uuid();
      pkt = {
        command: name,
        id: id
      };
      switch (name) {
        case 'create':
          pkt.attributes = obj;
          break;
        case 'get':
          pkt.name = obj;
          break;
        case 'delete':
          pkt.name = obj;
          break;
        default:
          console.log('UNKNOWN COMMAND');
      }
      return pkt;
    };

    return Socket;

  })(NetSocket);

  module.exports = Socket;

}).call(this);
